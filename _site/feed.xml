<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zyx Blog</title>
    <description>这里是 朱宇翔 的个人博客，软件工程在读学生狗。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 22 Aug 2019 20:02:12 +0800</pubDate>
    <lastBuildDate>Thu, 22 Aug 2019 20:02:12 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>时代的眼泪：CMM/CMMI能力成熟度模型</title>
        <description>&lt;p&gt;软件能力成熟度模型（Capability Maturity Model for Software）CMM 是一种用于评估软件承包能力以及改善软件质量的方法，侧重于软件开发过程的工程及管理能力的提高与评估。CMMI 是 1994 年提出的在 CMM 基础上衍生出的软件能力成熟度集成模型（Capability Maturity Model Integration），它将各种能力成熟度模型整合到同一个框架中去，为改进一个组织的各种过程提供了一个单一的集成化框架。CMMI 共有五个等级，标志着软件企业成熟度的五个层次。从低到高意味着软件开发生产计划精度逐级提高，单位工程生产周期逐渐缩短，单位工程成本逐级降低。&lt;/p&gt;

&lt;p&gt;CMM/CMMI 自 1987 年卡耐基梅隆大学软件研究所提出以来，已经过 30 年的软件行业的实践评估，曾被证明是卓有成效的软件能力成熟度评估方法。然而随着 21 世纪个人电脑的广泛普及，移动互联网的大规模发展，现在软件开发呈现出规模特别庞大，用户数量急剧增加，需求快速变更，软件迭代周期短，分发部署方式变化（版本更新频繁）的特点。鉴于这样的特点，21 世纪敏捷开发的思想被提出，并在短期内迅速风靡全球，成为当今互联网软件开发公司的主流开发方式。2018 年某权威调查报告指出 94%调查者所在企业使用敏捷方法进行开发[1]。而极限编程是敏捷开发方法学中最富有成效的开发方法之一，现在也被需要快速迭代的互联网软件开发行业所广泛采用。然而，由于 CMMI 倡导的开发实践常常和敏捷开发方式相违背，我们发现采用敏捷软件开发和极限编程的公司难以使用 CMM/CMMI 来帮助过程改进。荣国平等人[1]指出 CMM/CMMI 和敏捷方法不是对立面，而是两个领域的概念：前者是软件过程改进，后者是软件开发方法。我们在此基础上尝试阐释 CMM/CMMI 这样的软件过程改进方法已不适用于当下的软件开发方法。以下我们详细探讨 CMMI 不适用于当前软件环境的原因。&lt;/p&gt;

&lt;p&gt;首先，CMMI 倡导的决策方式过于笨重，不适用于当下市场需求快速变更的环境。CMMI成熟度第三级支持管理中，决策分析与解决方案 DAR（Decision Analysis and Resolution）旨在利用正式的评估过程，依据已建立的准则来评估各种已识别的方案，来分析可行的决策，选择解决方案。然而在市场需求快速变更的大环境下，迅速适应新状况的能力比正式评估解决方案的方式更有效，也更为敏捷开发团队所青睐。毕竟，敏捷宣言中明确指出“响应变化高于遵循计划”。因此，在敏捷开发模式中，实践中通常非正式地识别和评估决策。&lt;/p&gt;

&lt;p&gt;此外，CMMI 对于过程管理的级别不适用于当下软件开发的大环境。在软件能力成熟度模型中，组织级是过程管理的基本级别。过程管理中组织级过程焦点 OPF（Organizational Process Focus）根据对组织过程和过程资产的全面理解，分析当前过程的强项和不足，从而规划和实施组织过程改进。OPF 要求组织中有专门的实体或机制来负责过程改进工作。然而在敏捷软件实践中，“小团队”更受倡导，这是因为小型的，成员分工模糊的团队能够更快地适应变更。因此在敏捷软件和极限编程开发方式中，过程改进通常以小型项目为单位存在，过程改进中获得的新经验被每个个人所吸收，且不形成文档。此外，受当前主流的微服务或类似的开发架构所影响，互联网公司以一个个小型团队为结构组织，团队与团队间交互较少，改进一般只在团队内发生。因此建立组织级的过程改进不仅十分困难，实际上是帮助不大的。同样地，在 CMMI 中的组织过程性能 OPP（Organizational Process Performance）和组织革新部署 OID（Organizational Innovation and Deployment）中，CMMI 倡导以组织为单位度量过程性能，度量产品质量，建立革新部署的单位，这都与极限编程和敏捷开发等当下主流小型团队的开发方法相违背。&lt;/p&gt;

&lt;p&gt;第三，CMMI 中的量化项目管理 QPM（Quantitative Project Management）与小型团队开发方式相冲突[3]。QPM 倡导组织通过对项目的定量管理以期望达到项目预定的质量和过程性能指标。事实上，敏捷开发的团队并不进行这样耗费大量成本但无法提升团队管理的度量。此外，量化项目管理使用静态的控制方法和度量标准。这在大型团队上可能有效，但在小型团队上不仅没有作用，还会阻碍团队成员的开发动力。与其相类似的是 CMMI Generic Practices3.2 中的收集改进信息（Collect Improvement Information）。对于小型团队而言，改进信息更多地融入到个人经验的提升，收集改进信息与敏捷开发的思想冲突。此外，CMMI GP2.9 客观评估遵从度（意为邀请小组外的专业人士来对组内情况进行客观评估）。很明显，这对给予开发小组足够自由度的敏捷开发团队而言会是一个打击，会让小组成员对于自由开发有所顾忌。极限编程和敏捷开发建议小组能够在组长领导下自洽地评估团队工作效率，总结进度。&lt;/p&gt;

&lt;p&gt;第四，敏捷开发中，软件开发的主要目标是以有效的方式，制造出满足投资者需要的软件，而不是制造无关的文档，无关的模型。此外，敏捷开发主张更简单的方案就是更好的解决方案。而很明显，CMMI GP4.1 为过程建立量化目标（Establish Quantitative Objectives for the Process）与敏捷开发原则违背[2]。此外，GP4.2 稳定子过程性能（Stabilize Subprocess Performance）[4]使用静态和量化技术来评估子过程性能，从而使子过程的量化质量和过程性能达到稳定。这同样违背了敏捷开发原则：子过程的概念事实上和目标用户无关。且这一实践同样违反了第三条原因：以过多的量化方法指导改进。&lt;/p&gt;

&lt;p&gt;第五，CMMI 过分重视文档的重要性，认为文档是沟通的最佳方式。在 CMMI 的实际实践中，开发人员需要付出大量时间精力来撰写各类文档，然而这些文档绝大多数用处较为局限，却浪费了大量成本。反而，大量的文档增加了查询难度，使沟通的效率更为低下。而敏捷开发方式认为在开发小组中最有效的信息沟通方式是面对面交谈而不是文档。文档在敏捷开发中毫无疑问是必不可少的，但团队成员应尽量撰写必要的和简洁的文档，因为尽可能减少工作量的艺术尤为重要。除了增加工作量和成本外，CMMI 对文档的过分重视可能还会打消有创造才能的开发人员的创造动力，降低团队士气。&lt;/p&gt;

&lt;p&gt;此外，CMMI 不适用于中小企业也是不适用于当前的软件开发的原因之一。软件能力成熟度模型提出的时候，主要还是大公司主导软件开发，而进入 21 世纪，随着互联网的兴起，硬件成本的大幅下降，软件开发成本的不断降低，大量中小企业如雨后春笋般进入市场。两位来自爱尔兰的作者 Rory et al.[5]在对爱尔兰市场上 21 家中小型企业的经理采访后，认为使用和保持 CMM 软件改进过程会造成巨大成本和时间。然而相比起改进软件过程，中小型公司有许多优先级更高的事需要实现。许多受访者认为 CMM 对他们的开发造成了额外的负担如更多的文档工作和官僚主义(大大增加用于管理和应用软件过程的成本和资源)，并且软件过程改进可能削弱他们的创新性和灵活性，使他们更难以存活下去。因此 CMM 软件过程模型难以应用到现在互联网软件开发的主体-中小型企业上。相反地，这些企业更乐于拥抱极限编程，这能大大减少软件开发成本。一些公司发现如果使用 CMMI 来发布软件，他们可能需要评估三个月后才能部署，然而他们打算一天要发布好几次软件！&lt;/p&gt;

&lt;p&gt;总体上，CMM/CMMI 是一个过于细节，过于冗长，过于重量级的评估模型，而且它需要高层的强力管理才能得到实施。敏捷宣言的四个核心价值中有三个都与 CMMI 冲突：个体和互动高于流程和工具，工作的软件高于详尽的文档，响应变化和遵循计划。毫无疑问， CMMI 能够帮助软件公司提高软件过程的可预测性，可重复性和可靠性。然而在需求快速更新的互联网时代，软件公司的创造性和灵活性更为重要，而这正是 CMMI 为了达到软件过程的严谨所牺牲的要素。因此，当前软件大环境下需要轻量级的，易变更的解决方案来改进软件过程。&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;[1]	荣国平，张贺，邵栋，王青: 软件组织与管理方法综述. 软件学报, 2018&lt;/p&gt;

&lt;p&gt;[2]	Martin Fritzsche and Patrick Keil, “Agile Methods and CMMI: Compatibility or Conflict?”, In e-Informatica Software Engineering Journal, vol. 1, no. 1, pp. 9–26, 2007. DOI: .&lt;/p&gt;

&lt;p&gt;[3]	Turner R., Jain A. (2002) Agile Meets CMMI: Culture Clash or Common Cause?. In: Wells D., Williams L. (eds) Extreme Programming and Agile Methods — XP/Agile Universe 2002. XP/Agile Universe 2002. Lecture Notes in Computer Science, vol 2418. Springer, Berlin, Heidelberg&lt;/p&gt;

&lt;p&gt;[4]	Taghi Javdani Gandomani, HazuraZulzalil. Compatibility of Agile Software Development Methods and CMMI. Indian Journal of Science and Technology, [S.l.], p. 5089-5094, Aug. 2013. ISSN 0974 -5645.&lt;/p&gt;

&lt;p&gt;[5]	O’Connor, Rory and Coleman, Gerry (2009) Ignoring ‘best practice’: Why Irish software SMEs are rejecting CMMI and ISO 9000. Australasian Journal of Information Systems, 16 (1). ISSN 1449-8618&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/01/cmm_cmmi/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/01/cmm_cmmi/</guid>
        
        <category>CMM/CMMI</category>
        
        <category>能力成熟度</category>
        
        
      </item>
    
      <item>
        <title>读书笔记系列之《精益创业》</title>
        <description>&lt;p&gt;本文作者是一名有着丰富领域经验的创业者，他先是自己创建了一个基于虚拟画像的互联网公司，然后将其以高价卖给了雅虎公司。随后作者在风险投资，扶持创业公司方面投入了大量精力。&lt;/p&gt;

&lt;p&gt;本文第一篇章探讨了学习对衡量新创企业进展情况的重要性。作者竭力强调早期推出原型产品对于产品开发的重要性。开发者先推出仅有较少的必要功能的产品并面向早期顾客推出，这样企业就能够高效获得更精确的用户需求数据，并发现一些意料之外的客户行为。此外，能够在早期就避免一些可能的失败，并在顾客更喜欢的功能上下更多精力。&lt;/p&gt;

&lt;p&gt;值得一提的是，甚至连政府部门这样的较为保守的组织结构也能使用精益创业的方式来构建原型。作者举例美国一个政府经济管理部门开发了一个原型来让政府机构在正式计划启动之前，先小规模地先行运作起来。整个实验成本很低，但学到了很多经验，比如政府能够了解公民认为自己遇到了哪些问题，是什么促使人们致电，还能够推断目标区域内真正致电的百分比。此外，还能从此产品中逐渐展开形成完善的解决方案&lt;/p&gt;

&lt;p&gt;关于客户需求调研，作者在下文还强调一定要“走出办公大楼”去调研客户需求。创业者不能仅凭借市场调研资料或者白板分析去分析用户需求，而应当与早期用户直接接触获得直观反馈。&lt;/p&gt;

&lt;p&gt;本文定义了新创公司的商业模式循环：开发-认知-反馈循环。这个反馈循环是新创企业模式的核心内容，本书涉及的许多内容，都是尽可能将其循环总时间缩短。&lt;/p&gt;

&lt;p&gt;作者在第六章“测试”章节中提到了最小化可行产品的概念，他能用最快的方式和最小的经历完成“开发-测量-认知”的反馈循环。最小化可行产品能够验证1.产品提供给顾客是有价值的2.公司拥有一个可行的增长引擎。最小化可行产品分为不同类型，如视频化最小化可行产品，贵宾式最小化可行产品等。最小化可行产品不用过于关注质量和设计，主要是验证商业假设是否可行，而且也能够避免产品转型时的成本&lt;/p&gt;

&lt;p&gt;作者举的他们自己创业中的一个例子让我深受启发。在作者创业早期，他们的虚拟人像系统遇到了技术难题，无法让人像在他们居住的虚拟环境中自由行动，避开途中障碍。他们索性直接推出了静止的人像，然后顾客点击需要到达的地方，人像就会瞬移过去。这样的功能十分简陋粗糙，却十分有效，受到了顾客的广泛欢迎。大家认为这样的功能节省了时间，十分奇幻。因此我们有时候并不知道顾客的真实需求是什么，我们想象中的顾客需求很可能和顾客需求有差异。因此开发最小化可行产品有助于我们理解真实的用户需求。&lt;/p&gt;

&lt;p&gt;作者认为虚荣指标是应当严格防范的指标，我们应该避免诱惑，不使用这些指标。虚荣指标就是“总用户数量”，“总营业额增长”这些看起来很好看，实际上不能说明公司目前问题的指标。使用这些指标，创新核算无从谈起，真正的问题也可能被掩盖。相反的，作者鼓励使用三个“可”的指标：可执行（能够显示因果关系），可使用（产品报告应尽量简单可读；人们能方便地查看这些指标）和可审查（我们能亲自测试这些数据；生成报告的机制不太复杂）指标。&lt;/p&gt;

&lt;p&gt;新创企业一般有三种增长引擎，管理者应当根据增长模式的不同选择不同的衡量指标和公司策略。三种增长引擎如下：
1.黏着式：需要吸引并长期保留顾客，因此这类企业需要自习追踪顾客流失率。
2.病毒式：产品需要在人与人之间传递，就像病毒传播一样。如facebook等社交网站。这类公司必须关心如何提高每个顾客平均带来的朋友数
3.付费式：由于每位顾客都需要付费使用公司服务，因此公司也是用获客成本来度量获取顾客的容易程度。如果公司企图提高增长率，要么提高每位顾客的收入，要么降低获取顾客的成本。&lt;/p&gt;

&lt;p&gt;虽然一种企业可以使用多种增长引擎，但是作者认为这会造成很多混乱。因此作者建议新创企业每次关注一种增长引擎，只有彻底运用好一种引擎后，再转型到另一种引擎上。&lt;/p&gt;

&lt;p&gt;此文作者结合了自己创业的经验来为新创企业提供经验，是一本不可多得的创业指南。&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/24/theLeanStartup.1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/24/theLeanStartup.1/</guid>
        
        <category>读书笔记</category>
        
        <category>精益创业</category>
        
        
      </item>
    
      <item>
        <title>读书笔记系列之《黑客与画家》</title>
        <description>&lt;p&gt;作者是一位放荡不羁，与主流观点相悖的黑客，在书中提到的许多软件方面的观点都与软件工程传统思路不同，虽然我无法完全赞成作者的观点，但辩证地看待并分析《黑客与画家》一书使我受益匪浅。&lt;/p&gt;

&lt;p&gt;首先作者对书呆子的评价使我耳目一新。在美式中学教育中，你越喜欢读书，越不受别人的欢迎。而作者认为书呆子都是高智商人群。当同龄人把精力都放在如何使自己更受欢迎时，他们不愿意将经历放在打扮自己，放在社交上，而是放在学习里。相比于学校里，书呆子会遭受到恶魔一样的待遇，在成人世界中，这种情况就好的多了。作者认为美国的公立学校教育体制出了问题，导致学生远离学习。&lt;/p&gt;

&lt;p&gt;第三章仿佛是一个和软件完全无关的章节。作者认为从古至今，人们的思想都是随大流的，说出和社会违背的真话很有可能会遭受不公平的待遇。当大家不指出对方的话是错的，而是给对方的话贴标签如“修正主义”，“右倾主义”，那这时我们就应当警惕了。目前在美国，“政治正确”的风气登峰造极，和它相违背的都会遭受打压。作者希望读者能够不受这些社会流行舆论的禁锢，去思考那些惊世骇俗的思想观点。只要能看到别人看不到或者不敢看的东西，就会很有优势。虽然如此，作者建议对于这些“不能说的话”，想想就行，不要说出口，以免惹火上身。自由思考比畅所欲言更重要。作者还描写了很多应对的方式，都十分有益，如“将争论上升到抽象层次”，这里不再赘述。&lt;/p&gt;

&lt;p&gt;作者认为小团体比大公司有着显而易见的好处。小团队每个人的贡献都是可测量的，因为每个人都能看到自己的努力对于团队的贡献。作者将大公司比作罗马战舰，虽然有上千名划船手共同划船，但船却滑不快，这是因为大家都看不到自己努力对于整体的改变，因此大家就没有努力的动力。就算自己努力了，看到不努力的别人也会想“凭什么我要为他的懈怠买单”。而小公司的个体却能受到有效的激励，因为他们能自发地为团体谋取利益。因此现在大公司内常常会建立小的团队，自己管理自己，自负盈亏，来开发软件。比如腾讯的光子实验室。这就是由于小团队中每个个体能受到更大的激励，能充分发挥自己的能力。&lt;/p&gt;

&lt;p&gt;作者还对设计进行了探讨（不局限于软件方面）。作者认为好设计是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;简单的设计。美依赖于精心选择的结构性元素，而不依赖于表面装饰品的堆砌&lt;/li&gt;
  &lt;li&gt;永不过时的设计。避开时代风潮的影响。&lt;/li&gt;
  &lt;li&gt;启发式的设计。不必告诉使用者应该如何使用，使用者可以按照自己的愿望去使用它&lt;/li&gt;
  &lt;li&gt;有趣味性的设计。“幽默反映了一种力量，它是强壮感的表现。始终拥有幽默感代表你对厄运一笑了之，而丧失幽默感则代表你被厄运深深伤到。”&lt;/li&gt;
  &lt;li&gt;艰苦的设计。必须要艰苦地工作才能做出伟大的作品。&lt;/li&gt;
  &lt;li&gt;模仿大自然的设计。大自然在演化过程中已经解决了很多设计问题，因此模仿大自然的设计就是站在巨人的肩膀上。&lt;/li&gt;
  &lt;li&gt;好设计常常是大胆的设计。
我认为作者对设计的理解十分透彻，发人深省。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;令人惊讶的是作者对Lisp，Perl等语言的推崇，而对java的不屑。作者认为java过于笨重，对程序员的限制太多。而Lisp十分轻便，容易开发，因此应当是创业公司首选。我认为作者说的不无道理。在当今互联网世界中，迅速开发即是王道，使用Lisp, python等语言有助于快速早期系统的开发。然而作者由于自身经验的局限（关注于创业公司而不是大型，长期的项目），没能够看到高复用性，代码可读性，健壮性对软件维护的重要性。在大型项目中，Lisp，python的代码可维护性不如java。由于java是静态类型语言，对程序员的容错率更高，因此维护起来更好。由于作者只短期内创立了成功项目Viaweb，没能长久地维持下去，因此没能看到多人维护代码时的困难。&lt;/p&gt;

&lt;p&gt;虽然作者的部分观点在现在还是无法被世人（和我）完全地接受，但或许百年之后能证明作者是对的呢（比如java终究会落后于Lisp）。不过，作者的其他讨论让我如沐春风，至于其他更多引起争论的部分？让我们拭目以待。&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/08/hackerAndPrinter.1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/08/hackerAndPrinter.1/</guid>
        
        <category>读书笔记</category>
        
        <category>黑客与画家</category>
        
        
      </item>
    
      <item>
        <title>读书笔记系列之《软件管理沉思录》</title>
        <description>&lt;p&gt;软件管理沉思录是由一位经验丰富的管理者撰写的，结合实践和管理理论来为软件项目管理者提供指导的书籍。文章分为四个部分，分别是管理项目，管理团队，管理领导和管理自己。&lt;/p&gt;

&lt;p&gt;第一部分作者探讨了对软件项目的管理。作者认为我们必须着眼于构建高质量的软件产品，并为高质量项目制定计划。如今软件的项目越来越大，对于软件质量的要求也越来越高。由于基于测试的质量保障方案已不适用，软件工程师必须尝试在软件开发过程中就减少缺陷的引入。作者认为我们必须对项目制定阶段计划和产品计划。产品计划包含产品的规格和性能指标，工作所需时间的估算，进度预测。作者认为良好的计划必须经过管理者的审查。此外计划应该满足以下几点要求：易于理解，清晰明白，详细具体，精确缜密和准确无误。作者认为可以不断动态地变更计划以符合不断变更的需求。此外，计划应当受到良好的维护。&lt;/p&gt;

&lt;p&gt;第二部分是关于对团队的管理。和人件中作者一直强调的要打造具有凝聚力团队相似，此文中作者也高度看重高效团队对软件项目的重要性。作者认为好的团队需要大家有一致的目标，每位成员都扮演一个特定的角色，完成任务要求团队成员之间互相依赖。作者认为团队合作过程中应当警惕以下七个问题：缺乏有效的领导，缺乏妥协和合作，团队成员参与度不均等，拖延和缺乏信心，质量低劣，功能蔓延和无效的对等评估。作者认为可能造成团队失败的原因有以下几点：资源不足（如成员数量太少，培训不足等），缺乏清晰稳定的领导，目标不符合实际，士气不足。当一只团队彼此合拍时，他们之间产出的总和能超出每个个体产出的总和。高效团队必备如下四个条件：团队凝聚力，富有挑战性的目标，目标的追踪和反馈，共同的工作架构。在构建凝胶型团队时，交流十分重要，作者认为对于团队交流来说，一定要保持透明，倾听和协商。&lt;/p&gt;

&lt;p&gt;作者在第四章中还为如何做好一名团队成员提供了建议：比如做任何需要的事儿而不用要求和指示，基于计划作出负责任的承诺并履行。作者认为群体讨论时&lt;/p&gt;

&lt;p&gt;作者认为领导力是决定团队成败的关键因素。首先，作者认为应当用承诺来激励团队成员。承诺的三要素是协商，约定和执行。有趣的是，团队集体承诺似乎比个人的单独承诺的激励作用更大。可信的团队承诺有四条要求：自愿，可见，可信和得到承认。此外，作者还建议建立短期的目标来制造紧迫感，能够避免进度大量落后。&lt;/p&gt;

&lt;p&gt;文章第三部分探讨如何和自己的上级沟通。如果上级要求的完成时间不现实，应当勇于提出，并积极捍卫你的计划。在向上级做出任何承诺之前，都要有一个计划，然后根据计划来承诺。要让管理者和你商谈，如果自己的管理者不可理喻，就越过他，直接向更高级管理者反映问题。如果自己要提出过程改进，应当积极向管理者提出战略性理由，充分分析各项成本，理解当前业务环境，找出关注点并做一次合理性检查。同时，也可以为过程改进提出短期的战术性理由。&lt;/p&gt;

&lt;p&gt;文章最后一部分则是建议读者管理好自己。一个精确控制的计划，和有质量控制的个人过程能明显帮助你提高。要做好自己的管理者，真正掌控自己的工作，并说服管理者同意由你管理自己。改变工作方式可以遵循如下的步骤：确定质量目标，衡量产品质量，理解过程，调整过程，应用调整的过程，衡量结果，把结果与目标进行比较，循环并且不断改进。作者认为应当对时间进行管理，包含以下步骤：把主要活动分类，记录每项主要活动所用时间，以标准方式记录时间，把时间数据放在一个便利的地方。&lt;/p&gt;

&lt;p&gt;最后一章是对读者领导力的建议。你的所作所为都会影响团队，因此应当做好自己，为团队所有所做的事情负责，为团队树立良好的榜样。领导力是必须赢得的，是一个高度个人化的东西。最好努力成为一位变革型的领导，对工作充满激情。&lt;/p&gt;

&lt;p&gt;在全书中，作者还穿插着对于PSP和TSP的宣扬。对软件过程的重视也是本书一大特点。&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/22/contemplate.1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/22/contemplate.1/</guid>
        
        <category>读书笔记</category>
        
        <category>软件管理沉思录</category>
        
        
      </item>
    
      <item>
        <title>读书笔记系列之《人件》</title>
        <description>&lt;p&gt;人月神话与人件都是软件工程领域的入门必读书籍。前者注重于软件开发本身，注重于系统开发与设计中应当注意的事情；而后者则将软件工程中人的因素剥离开，单独来看人对软件工程的影响。在人件中，人被当作工程中的一个模块来管理。人件认为，软件工程中引起项目失败的因素更多地属于社会学范畴，而不是技术上的失败。&lt;/p&gt;

&lt;p&gt;本书分为六个部分，第一部分探讨的是管理人力资源的问题。首先，作者指出软件项目失败率很大，而失败的原因常常不出在技术上，而出在“政治”上。事实上，作者认为，在软件领域，管理者应当更多的注重社会问题而不是技术问题。具体地说，作者提出了几个建议：鼓励大家犯错；给员工更多空间以鼓励大家创新；不逼迫员工加班，给员工更多空余时间使得他们在工作时间能更有效率工作；提高产品质量要求以提高生产效率（虽然听起来有点矛盾但的确是这样）。&lt;/p&gt;

&lt;p&gt;作者不仅在第一章，而且在第三章提到：由于人力流失会带来很大的额外成本，如重新培训成本，项目延后成本，招聘成本等等，因此管理者应当尽力留住员工，为员工创造好的工作环境，让员工能满意自己的工作环境和工作状态，降低员工所受的过重压力。作者认为换人的成本大概等于雇佣这名员工两年总花销的20%，这是一笔可怕的支出！因此好好留住员工能极大地节省成本。为了留住员工，作者建议公司不要搬迁，定期培训员工等。&lt;/p&gt;

&lt;p&gt;文章第二章对如何创造好的工作环境给出了建议。这其中大多是，非常具体实在的建议。比如作者给出了他对办公室整体布置的建议：要让大家能看到窗户。此外，公司应该为员工提供干净，干扰少，有隐私，高效率的空间，尽量减少开放式工位的设计。虽然这些建议如果真的实施起来，会增加一笔不小的成本，但这成本和提高的工作效率相比，简直是不足一提。作者十分注重工作时间的连续性，认为开发人员应当尽可能地不被打断（包括接听电话，被同事打断等），以获得更高的实际工作时间。此外，作者还提出了一些别的锦上添花的建议：比如让团队自行定制工作空间，增加公共空间的功能和面积等。&lt;/p&gt;

&lt;p&gt;第三部分则谈到人力资源对于管理的重要性。作者对领导力的阐释发人深省：靠个人魅力来领导比靠职权来领导更有效，而个人魅力的塑造通过主动承担任务，胜任工作，为任务提前准备功课，让每个人创造更大的价值和保持幽默与善意。这样的领导能够更有效地激发组员的创新。&lt;/p&gt;

&lt;p&gt;作者建议管理者仔细设计招聘以获得更适合项目的成员。管理者可以要求应聘者携带作品集以显示他们实际完成的工作，也可以组织一场试演来评估应试者的协调表达能力并使应聘者能更好地融入团队。&lt;/p&gt;

&lt;p&gt;文章第四部分围绕如何打造一支团队来描写。构建一支有凝聚力的团队，能够充分发挥小组每一个人的才华。一旦团队产生了凝聚力，成功的概率大大增加。为了让有凝聚力的团队行程，作者认为管理者必须警惕以下一些管理上的错误：防御式管理（不信任你的成员）；官僚主义（比如过多的文案工作）；团队成员被物理上分割开来；碎片化的工作时间；牺牲产品质量；伪造过紧的截止日期；团队控制；用假模假样的励志标语或是励志纪念品来鼓励团队行程；加班。此外，作者特别提到要减少团队内部的竞争，使团队能行程一种互帮互助互相辅导的氛围，要让所有人都能够理解：个体的成功是完全建立在集体成功之上的。&lt;/p&gt;

&lt;p&gt;第五部分作者建议管理者尝试构建良好的企业文化。让我印象深刻的是作者对会议风格的倡议。作者认为既不能开过于冗长的会议，也不能过于恐惧会议，害怕会议浪费时间。作者建议会议中应该减少参与人员笔记本电脑的使用，会使会议效率变得更加低下。会议应当使参与人员尽可能少（将参与者局限于利益相关的人）。作者建议我们提前确定好会议的开始和终止条件，以使效率提高。&lt;/p&gt;

&lt;p&gt;当我在美团点评实习的时候，发现会议冗长的情况非常常见。一个会议经常可以开两小时，然后与会者通通打开笔记本电脑在各干各的事情。此外，许多会议在晚上七点后举行，实际上是变相强迫员工加班。这种会议方式事实上对建设团队非常不利，我们的小组成员能够通过会议获取的信息十分有限。&lt;/p&gt;

&lt;p&gt;和会议一样，作者认为过多无意义的电子邮件也会造成团队成员时间碎片化，造成大家对邮件逐渐地不关注了，从而引起团队自毁。应该减少现有的大量无意义的抄送邮件，垃圾邮件和琐碎信息。&lt;/p&gt;

&lt;p&gt;文章最后的第六部分则认为，工作应该是快乐的，只有当工作人员感受到工作的乐趣的时候，才能充分发挥他们的才能和效率。为了让大家保持工作的乐趣，作者建议引入一点混乱无秩序，使工作生活充满惊喜。比如开展试点项目，战争游戏，头脑风暴，素质拓展和培训，旅行等活动。此外，还可以让能力强的人担任组织里的“自由电子”，以充分发挥他们的才华。&lt;/p&gt;

&lt;p&gt;总之，人件从各个不同的部分阐释了管理者能够做的改变。或许这些组织学上的，社会学上的创新反而能比技术上创新带来更多的进步。&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/05/peopleware/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/05/peopleware/</guid>
        
        <category>读书笔记</category>
        
        <category>人件</category>
        
        
      </item>
    
      <item>
        <title>读书笔记系列之《人月神话》</title>
        <description>&lt;p&gt;从我大二的时候，软件工程的老师们就一致推荐人月神话作为软件工程专业的入门读物。在人月神话中，作者分条理阐述了许多从软件工程实践中总结出的经验，发人深省，为软件项目管理者提供了在对解决人与软件协调困难的一些解决方案。&lt;/p&gt;

&lt;p&gt;首先，项目发生滞后的最主要原因是缺乏合理的时间进度。而缺乏合理的时间进度主要是由于：1.我们对项目进度的估算方法不太有效。2.我们的估算进度默认将进度与工作量相混淆，假设人和月可以互换。3.软件过程经理很少会持续地进行估算工作。4.对进度缺乏跟踪和监督。5.当意识到进度的偏离时，传统的反映是增加人力。此外，编程人员都是乐观主义者，直到项目出现严重偏离后，才会发现进度的滞后。作为一个学科，软件工程缺乏良好的数据估计方法。项目进度的落后通常是由于一天一天的落后逐渐积累起来的落后。这种小额，多次的落后比起重大灾难，更难以察觉，防范和弥补。因此，作者建议我们建立一个严格的进度表来控制项目进度，由里程碑和日期组成。其中里程碑是具体的，特定的，可度量的事件。此外，作者还建议我们制定pert图来跟踪项目进度，防止偏离里程碑，并能对项目进度偏离找到尽快的解决方案。甚至对于大型项目，作者还建议建立一个专门小组来维护里程碑报告。&lt;/p&gt;

&lt;p&gt;我认为人月神话的一个核心观点是：在系统设计中，概念完整性是最重要的考量因素。即设计系统时为了保持系统各部分风格的一致性，宁可省略一些不符合整体规则的特性和改进。为了保证概念完整性，大型软件项目通常采用树状的设计结构，即由一个人或少数极有默契的设计人员来负责体系结构的设计。此外，体系结构设计与代码具体实现必须仔细地区别开来。在现代软件系统设计中，这一提倡被毫无疑问地实施了：大型项目中，由体系结构师来设计整体的结构，到各个子系统内，也使用由上往下的设计方式。由子系统结构设计师设计子系统的结构，再将实现任务分发给各实现单位。这么做也事实上加快了软件项目的进程，因为体系结构设计，实现和测试等工作可以并发地进行。由于成本的来源很大程度上是成员沟通和交流的成本，因此小型，精干的队伍是更好的，虽然对于大型系统中这显得太慢了。为了使整个系统能具有概念上的完整性，应该指定一个有经验的架构师，从上至下进行整体结构的设计。此外，作者还认为设计师不能画蛇添足，即牢记具体实现的开发人员也应当具有创造性和发明性，结构师不应该剥夺底层人员创造的乐趣。所以结构师只能建议实现方案，而不能支配。结构师应该对实现的建议保持低调，随时准备放弃自己对具体实现的建议。&lt;/p&gt;

&lt;p&gt;此外我感到较为深刻的是，作者十分重视团队的交流，建议团队使用尽可能多的方式进行交流，建议团队通过正式的项目工作手册进行交流。在现代项目中，使用文档进行交流是非常重要的一个部分。作者还十分重视手册的设计，变更和维护。我认为这对现在项目十分有参考性。我们应当建立维护良好，实时变更的文档，来进行精确，无歧义的沟通。而且书面记录决策和分歧，有助于消除分歧，突出矛盾。此外项目经理还能够根据书面记录的文档来检验工作是否很好地完成。&lt;/p&gt;

&lt;p&gt;没有银弹是作者最后提出的一个知名观点。作者认为软件系统具有其根本的，无法规避的内在特性：复杂性，一致性，可变性和不可变性。软件很可能是有史以来人类创造出来的最复杂的实体。作者将软件开发活动分为根本活动和次要活动。根本活动是打造构成软件实体的复杂结构，次要任务是使用编程语言表达这些实体的任务，在时间和空间限制内将它们映射成机器语言。除非次要任务的所有时间削减到0，否则生产效率不可能产生数量级的提高，这就是没有银弹。&lt;/p&gt;

&lt;p&gt;总而言之，虽然本书著书至今已有四十多年，在互联网高速发展的今天，它倡导的软件工程方法依然有价值，我将本书推荐给每一名立志参加软件行业的学生。&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/09/20/first/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/20/first/</guid>
        
        <category>读书笔记</category>
        
        <category>人月神话</category>
        
        
      </item>
    
  </channel>
</rss>
